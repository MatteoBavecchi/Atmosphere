
#include <SoftwareSerial.h>
#include <EEPROM.h>
#include <dht11.h>

// For webhost connection.
#define HOST "atmosphere.96.lt"  // Webhost
#define TSKEY "SDNYIAKWETQHVDHZ"    // Thingspeak Key
#define IP "184.106.153.149"          // thingspeak.com

int Temp=0,Hum=0;
float co2=0.0;
float gpl=0.0;
float co=0.0;

SoftwareSerial esp8266(2,3);


dht11 DHT;
#define DHT11_PIN 4
#define BUZZ_PIN 5

#define MQ2_PIN (A3)
#define MQ7_PIN (A2)  
#define MQ135_PIN 4

int MQ7_VALUE=0;

    
#define RL_VALUE (10)   
#define RO_CLEAN_AIR_FACTOR (9.83)  

#define CALIBARAION_SAMPLE_TIMES (50)
#define CALIBRATION_SAMPLE_INTERVAL (500)
#define READ_SAMPLE_INTERVAL (50)
#define READ_SAMPLE_TIMES (5) 
#define GAS_LPG (0)

float LPGCurve[3]={2.3,0.21,-0.47};   
float Ro=10;



#define MQ135_DEFAULTPPM 407 //default ppm of CO2 for calibration
#define MQ135_DEFAULTRO 68550 //default Ro for MQ135_DEFAULTPPM ppm of CO2
#define MQ135_SCALINGFACTOR 116.6020682 //CO2 gas value
#define MQ135_EXPONENT -2.769034857 //CO2 gas value
#define MQ135_MAXRSRO 2.428 //for CO2
#define MQ135_MINRSRO 0.358 //for CO2

unsigned long SLEEP_TIME = 30000; // Sleep time between reads (in seconds)
//VARIABLES
float mq135_ro = 10000.0;    // this has to be tuned 10K Ohm
int MQ135_VAL = 0;                 // variable to store the value coming from the sensor
float CO2 =0.0;
float lastAIQ =0.0;

void setup(){
  
  startupTone();
  Serial.begin(9600);
  
  Serial.print("Calibrating...\n");                
  Ro = MQ2Calibration(MQ2_PIN);
  Serial.println("Calibration is done...");
  esp8266.begin(9600);
  esp8266.println("AT+RST");
   
  tone(BUZZ_PIN,600);
  delay(100);
  noTone(BUZZ_PIN);
  
  delay(100);

  Serial.println("mi connetto");
  setCredenziali();
  delay(1000);
  esp8266.println("AT+RST");
  delay(1500);
  esp8266.print("AT+CWMODE=3\r\n"); // configure as access point
  delay(2000);
  connectWiFi(getSSID(),getPsw());

}



void loop(){
  
      
      int chk;
  Serial.print("DHT11, \t");
  chk = DHT.read(DHT11_PIN);    // READ DATA
  switch (chk){
    case DHTLIB_OK:  
                Serial.print("OK,\t"); 
                break;
    case DHTLIB_ERROR_CHECKSUM: 
                Serial.print("Checksum error,\t"); 
                break;
    case DHTLIB_ERROR_TIMEOUT: 
                Serial.print("Time out error,\t"); 
                break;
    default: 
                Serial.print("Unknown error,\t"); 
                break;
  }
 // DISPLAT DATA


  uint16_t valr = analogRead(MQ135_PIN);// Get AIQ value
 
  uint16_t val =  ((float)22000*(1023-valr)/valr); 
  //during clean air calibration, read the Ro value and replace MQ135_DEFAULTRO value with it, you can even deactivate following function call.
  mq135_ro = mq135_getro(val, MQ135_DEFAULTPPM);
  //convert to ppm (using default ro)
  CO2 = mq135_getppm(val, MQ135_DEFAULTRO);

 
  MQ7_VALUE= analogRead(MQ7_PIN);
  Serial.print("CO2 value: ");
  Serial.println(CO2);
  Serial.print("CO value: ");
  Serial.println(MQ7_VALUE);
  Serial.print("Humidity value: ");
  Serial.println(DHT.humidity,1);
  Hum=DHT.humidity;
  Serial.print("Temperature value: ");
  Serial.println(DHT.temperature,1);
  Temp=DHT.temperature;
  Serial.print("GPL:");
  gpl= MQ2GetGasPercentage(MQ2Read(MQ2_PIN)/Ro,GAS_LPG);
  Serial.print(gpl);
  if (gpl!=0) alertTone();
  Serial.println( "ppm" );
  delay(500);
     
    sendData(String(Temp),String(Hum),String(CO2),String(gpl),String(MQ7_VALUE)); 
  delay(30000); //10 min | prima 30000 (30 sec)
}





void sendData(String T, String H,String C2, String G, String C){
  esp8266.println("AT+CIPCLOSE");
  delay(1000);
    String cmd = "AT+CIPSTART=\"TCP\",\"";
  cmd += HOST;
  cmd += "\",80";
  esp8266.println(cmd);
  delay(3000);
  if(esp8266.find("Error")){
    Serial.println("Errore connessione");
    return;
  }

  // Send data to Web Server
  cmd = "GET /data.php?mac=";
  cmd += getMacAddr();
cmd += "&t=";
  cmd += T;
  cmd += "&h=";
  cmd += H;
  cmd += "&gpl=";
  cmd += G;
  cmd += "&co2=";
  cmd += C2;
  cmd += "&co=";
  cmd += C;
  cmd += " HTTP/1.1\r\nHost: ";
  cmd += HOST;
  cmd += "\r\n\r\n\r\n";
  esp8266.print("AT+CIPSEND=");
  esp8266.println(cmd.length());
  delay(1000);
  

  if(esp8266.find(">")){
    
    esp8266.print(cmd);
   Serial.println("INVIATO AL SERVER");
    
    tone(BUZZ_PIN,2000);
  delay(100);
  noTone(BUZZ_PIN);
  }
  else{
    Serial.println("FAIL");
  }
  delay(1000);




  
 // SEND DATA TO THING SPEAK
 esp8266.println("AT+CIPCLOSE");
  delay(2000);
  cmd = "AT+CIPSTART=\"TCP\",\"";
  cmd += IP;
  cmd += "\",80";
  esp8266.println(cmd);
  delay(2000);
  if(esp8266.find("Error")) return;
  
  // Send data.
  cmd = "GET /update?key=";
  cmd += TSKEY;
  cmd += "&field1=";
  cmd += T;
  cmd += "&field2=";
  cmd += H;
  cmd += "&field3=";
  cmd += G;
  cmd += "&field4=";
  cmd += C2;
  cmd += "&field5=";
  cmd += C;
  cmd += "\r\n";
  esp8266.print("AT+CIPSEND=");
  esp8266.println(cmd.length());
  
  if(esp8266.find(">")){
    esp8266.print(cmd);
    Serial.println("INVIATO A THINGSPEAK");
    tone(BUZZ_PIN,2500);
  delay(100);
  noTone(BUZZ_PIN);
  }
  else{
    Serial.println("FAIL");
  }
  delay(1000);
  esp8266.println("AT+CIPCLOSE");
}







boolean connectWiFi(String SSID, String PASS){
  
  delay(1000);
  String cmd="AT+CWJAP=\"";
  cmd+=SSID;
  cmd+="\",\"";
  cmd+=PASS;
  cmd+="\"";
  esp8266.println(cmd);
  delay(5000);
  if(esp8266.find("OK")){
    Serial.println("CONNESSO.");
    return true;
    
  }
  else{
    Serial.println("ERRORE DURANTE LA CONNESSIONE");
    return false;
    
  }
}


float MQ2ResistanceCalculation(int raw_adc){
  return ( ((float)RL_VALUE*(1023-raw_adc)/raw_adc));
}
 
float MQ2Calibration(int mq_pin){
  int i;
  float val=0;
 
  for (i=0;i<CALIBARAION_SAMPLE_TIMES;i++) {            //take multiple samples
    val += MQ2ResistanceCalculation(analogRead(mq_pin));
    delay(CALIBRATION_SAMPLE_INTERVAL);
  }
  val = val/CALIBARAION_SAMPLE_TIMES;                   //calculate the average value
 
  val = val/RO_CLEAN_AIR_FACTOR;                        //divided by RO_CLEAN_AIR_FACTOR yields the Ro 
                                                        //according to the chart in the datasheet 
 
  return val; 
}


float MQ2Read(int mq_pin){
  int i;
  float rs=0;
 for (i=0;i<READ_SAMPLE_TIMES;i++) {
    rs += MQ2ResistanceCalculation(analogRead(mq_pin));
    delay(READ_SAMPLE_INTERVAL);
  }
 rs = rs/READ_SAMPLE_TIMES;
 return rs;  
}

 
int MQ2GetGasPercentage(float rs_ro_ratio, int gas_id){
  if ( gas_id == GAS_LPG ) {
     return MQ2GetPercentage(rs_ro_ratio,LPGCurve);
  }   
 return 0;
}

 
int  MQ2GetPercentage(float rs_ro_ratio, float *pcurve){
  return (pow(10,( ((log(rs_ro_ratio)-pcurve[1])/pcurve[2]) + pcurve[0])));
}



long mq135_getro(long resvalue, double ppm) {
return (long)(resvalue * exp( log(MQ135_SCALINGFACTOR/ppm) / MQ135_EXPONENT ));
}

double mq135_getppm(long resvalue, long ro) {
  double ret = 0;
  double validinterval = 0;
  validinterval = resvalue/(double)ro;
  if(validinterval<MQ135_MAXRSRO && validinterval>MQ135_MINRSRO) {
  ret = (double)MQ135_SCALINGFACTOR * pow( ((double)resvalue/ro), MQ135_EXPONENT);
   }
  return ret;
}



String getMacAddr(){
  String MAC="";
  int Read=0;
  for(int x=0;x<255;x++){ 
       if(char(EEPROM.read(x))=='_') {
        Read++;
        if(Read==3) break;
        else continue;
        }
        
       if(Read==2) MAC += char(EEPROM.read(x));
       
  }
  return MAC;
}


String getSSID(){
  String SSID="";
  for(int x=0;x<32;x++){ 
       if(char(EEPROM.read(x))=='_') break;
       SSID += char(EEPROM.read(x));
  }
  return SSID;
}

String getPsw(){
  String psw="";
  boolean Read=false;
  for(int x=0;x<100;x++){ 
       if(char(EEPROM.read(x))=='_') {
        Read= !Read;
        if(!Read) break;
        else continue;
        }
        
       if(Read) psw += char(EEPROM.read(x));
       
  }
  return psw;
  
  
}


void writeEEPROM(String SSID, String psw, String MAC){
 if(SSID==getSSID() && psw==getPsw()) return; //Controllo se le credenziali sono uguali 
 int addr=0;
  for(int j=0;j<SSID.length();j++){ 
      EEPROM.write(addr, int(SSID[j])); //Scrivo l' SSID
      addr++;
  }
  
  EEPROM.write(addr,int('_'));
  addr++;
  
  for(int j=0;j<psw.length();j++){ 
      EEPROM.write(addr, int(psw[j])); //Scrivo la password
      addr++;
  }
  
  EEPROM.write(addr,int('_'));
  addr++;
  
  for(int j=0;j<MAC.length();j++){ 
      EEPROM.write(addr, int(MAC[j])); //Scrivo l' indirizzo MAC
      addr++;
  }
  
  EEPROM.write(addr,int('_'));
  addr++;
  }



void setCredenziali(){
  
 esp8266.print("AT+RST\r\n"); // reset module
 delay(2000);
 esp8266.print("AT+CWMODE=3\r\n"); // configure as access point
 delay(1000);
 esp8266.print("AT+CIFSR\r\n"); // get ip address //192.168.4.1
delay(1000);
 esp8266.print("AT+CIPMUX=1\r\n"); // configure for multiple connections
 delay(1000);
 esp8266.print("AT+CIPSERVER=1,80\r\n"); // turn on server on port 80
delay(1000);
while(true){
if(millis()>90754) break;
  if(esp8266.available()) // check if the esp is sending a message 
  {
 
    
    if(esp8266.find("+IPD,"))
    {
        beep();
     delay(1000); // wait for the serial buffer to fill up (read all the serial data)
     // get the connection id so that we can then disconnect
     int connectionId = esp8266.read()-48; // subtract 48 because the read() function returns 
                                           // the ASCII decimal value and 0 (the first decimal number) starts at 48
          
     esp8266.find("esp="); // advance cursor to "esp="
     
     String SSID="";
     String psw="";
     String MAC="";
     char x;
      
     while(esp8266.available()){//inserisco in SSID l' SSID
          x=esp8266.read();
          if(x=='_') break;
          SSID+=x;
     }
     
     x=' ';
     
     while(esp8266.available()){ //inserisco in psw la password
          x=esp8266.read();
          if(x=='_') break;
          psw+=x;
     }
     
     x=' ';
     
     while(esp8266.available()){ //inserisco in MAC il MAC addr
          x=esp8266.read();
          if(x=='_') break;
          MAC+=x;
     }
     
     x=' ';

     
     Serial.println("credenziali: ");
     Serial.print("SSID: ");
     Serial.println(SSID);
     Serial.print("password: ");
     Serial.println(psw);
     Serial.print("MAC Address: ");
     Serial.println(MAC);
       
     writeEEPROM(SSID, psw, MAC);
     
     // make close command
     String closeCommand = "AT+CIPCLOSE="; 
     closeCommand+=connectionId; // append connection id
     closeCommand+="\r\n";//
     
  
    delay(1000);
    esp8266.print("AT+CIPSERVER=0\r\n");
     delay(500);
       esp8266.print("AT+RST\r\n");
       delay(500);
    Serial.println(getSSID());
    Serial.println(getPsw());

    Serial.println("mi connetto...");
    break;
    
    
  }
  }


}
}
void startupTone(){
  tone(BUZZ_PIN,600);
  delay(100);
  noTone(BUZZ_PIN);
  delay(50);
   tone(BUZZ_PIN,600);
  delay(100);
  noTone(BUZZ_PIN);
  delay(10);
   tone(BUZZ_PIN,800);
  delay(100);
  noTone(BUZZ_PIN);
}
void alertTone(){
  for(int i=0;i<5;i++){
  tone(BUZZ_PIN,1000);
  delay(1000);
  noTone(BUZZ_PIN);
  delay(10);
   tone(BUZZ_PIN,2000);
   delay(1000);
  noTone(BUZZ_PIN);
  delay(20);
  }
}

void beep(){
  tone(BUZZ_PIN,800);
  delay(100);
  noTone(BUZZ_PIN);
  delay(20);
  tone(BUZZ_PIN,800);
  delay(100);
  noTone(BUZZ_PIN);
}

